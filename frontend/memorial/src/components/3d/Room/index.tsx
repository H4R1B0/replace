/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 room.glb -t -i -T --shadows
Files: room.glb [5.46MB] > room-transformed.glb [1.35MB] (75%)
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import roomPath from "./room.glb?url";

type GLTFResult = GLTF & {
  nodes: {
    trashCan_1: THREE.Mesh;
    trashCan_2: THREE.Mesh;
    sideTable: THREE.Mesh;
    Bed: THREE.Mesh;
    Window002: THREE.Mesh;
    woodFloor: THREE.Mesh;
    Picture001: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
    ["Blanket pattern"]: THREE.MeshStandardMaterial;
    Emission: THREE.MeshStandardMaterial;
    Floor: THREE.MeshStandardMaterial;
    ["Picture 2"]: THREE.MeshStandardMaterial;
  };
};

type RoomProps = {
  onTrashcanClick?: () => void;
} & JSX.IntrinsicElements["group"];

// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
// >;

export default function Room({ onTrashcanClick, ...other }: RoomProps) {
  const { nodes, materials } = useGLTF(roomPath) as GLTFResult;
  return (
    <group {...other} dispose={null}>
      <group
        position={[0.249, 1.699, 4.348]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={1.47}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.trashCan_1.geometry}
          material={materials.PaletteMaterial001}
          onClick={onTrashcanClick}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.trashCan_2.geometry}
          material={materials.PaletteMaterial002}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.sideTable.geometry}
        material={materials.PaletteMaterial003}
        position={[2.886, 1.492, 1.141]}
        scale={0.411}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Bed.geometry}
        material={materials["Blanket pattern"]}
        position={[1.928, 1.501, 1.849]}
        scale={0.411}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Window002.geometry}
        material={materials.Emission}
        position={[-0.173, 3.433, 2.537]}
        scale={[0.411, 0.559, 0.411]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.woodFloor.geometry}
        material={materials.Floor}
        position={[1.637, 1.465, 2.812]}
        scale={0.411}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Picture001.geometry}
        material={materials["Picture 2"]}
        position={[0.958, 2.781, 0.951]}
        rotation={[Math.PI, 0, Math.PI]}
        scale={[0.381, 0.381, 0.294]}
      />
    </group>
  );
}

useGLTF.preload(roomPath);
